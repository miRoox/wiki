caption: RAII
created: 20190924030056855
creator: miRoox
modified: 20230316091619584
modifier: miRoox
tags: C++惯用法
title: 资源获取即初始化
tmap.id: 2af8fc90-ba81-4bca-8936-1b6207287ed4
type: text/vnd.tiddlywiki

! 资源获取即初始化（RAII）

//资源获取即初始化（Resource Acquisition Is Initialization, RAII）//是一种 [[C++]] 编程技术，它将必须在使用前请求的资源（分配的[[堆内存]]、执行[[线程]]、打开的[[套接字]]、打开的文件、锁定的[[互斥体]]、磁盘空间、[[数据库]]连接等——任何存在受限供给中的事物）的生命周期绑定与一个对象的生存期相绑定。

RAII 保证资源可用于任何会访问该对象的函数（资源可用性是一种类不变式，这会消除冗余的运行时测试）。它亦保证所有资源在其控制对象的生存期结束时，以获取顺序的逆序释放。类似地，若资源获取失败（构造函数以异常退出），则为已构造完成的对象和基类子对象所获取的所有资源，会以初始化顺序的逆序释放。这有效地利用了语言特性（对象生存期、退出作用域、初始化顺序以及栈回溯）以消除内存泄漏并保证异常安全。
根据 RAII 对象的生存期在退出作用域时结束这一基本状况，此技术的另一名称是//作用域界定的资源管理（Scope-Bound Resource Management，SBRM）//。

RAII 可总结如下:

* 将每个资源封装入一个类，其中
** 构造函数请求资源，并建立所有类不变式，或在它无法完成时抛出异常，
** 析构函数释放资源并决不抛出异常；
* 始终经由 RAII 类的实例使用满足要求的资源，该资源
** 自身拥有自动存储期或临时生存期，或
** 具有与自动或临时对象的生存期绑定的生存期

移动语义使得在对象间，跨作用域，以及在线程内外安全地移动所有权，而同时维护资源安全成为可能。

拥有 `open()`/`close()`、`lock()`/`unlock()`，或 `init()`/`copyFrom()`/`destroy()` 成员函数的类是非 RAII 类的典型的例子：

```cpp
std::mutex m;
 
void bad() 
{
    m.lock();                    // 请求互斥体
    f();                         // 若 f() 抛异常，则互斥体永远不被释放
    if(!everything_ok()) return; // 提早返回，互斥体永远不被释放
    m.unlock();                  // 若 bad() 抵达此语句，互斥才被释放
}
 
void good()
{
    std::lock_guard<std::mutex> lk(m); // RAII类：互斥体的请求即是初始化
    f();                               // 若 f() 抛异常，则释放互斥体
    if(!everything_ok()) return;       // 提早返回，互斥体被释放
} 
```

C++ 标准库遵循 RAII 管理其自身的资源：`std::string`、`std::vector`、`std::thread`，以及多数其他类在构造函数中获取其资源（错误时抛出异常），
并在其析构函数中释放之（决不抛出），而不要求显式清理。

另外，标准库提供几种 RAII 包装器以管理用户提供的资源：

* `std::unique_ptr` 及 `std::shared_ptr` 用于管理动态分配的内存，或以用户提供的删除器管理任何以普通指针表示的资源；
* `std::lock_guard`、`std::unique_lock`、`std::shared_lock` 用于管理互斥体。

RAII 不适用于并非在使用前请求的资源：CPU 时间、核心，以及缓存容量、熵池容量、网络带宽、电力消费、栈内存等。

!!! 外部链接

* [[C++ 核心方针 E.6 “用 RAII 避免泄露”|https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#e6-use-raii-to-prevent-leaks]]