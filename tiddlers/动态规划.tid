aliases: DP
created: 20240821141044451
creator: miRoox
modified: 20250313140909553
modifier: miRoox
tags: 运筹学 TODO 算法
title: 动态规划
tmap.id: 8f2977ae-e5ff-4c25-83ea-007e47772551
type: text/vnd.tiddlywiki

''动态规划''（Dynamic programming，DP）是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。

动态规划常常适用于有重叠子问题和[[最优子结构]]性质的问题，从而使所耗时间往往远少于朴素解法。

通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其[[记忆化]]存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。

!! 一般思路

解决动态规划问题时，我们需要按照以下步骤系统地思考和解决：

# 定义状态：首先要思考如何用数学语言描述问题。定义状态是整个解题过程中最关键的一步，它决定了我们如何存储和使用计算结果。我们需要仔细思考：要解决的问题需要哪些变量来表示？这些状态通常会以数组的形式存储下来。一个好的状态定义应该能够完整地描述问题在某个阶段的情况。
# 找出状态转移方程：当我们定义好状态后，需要思考状态之间是如何转移的。也就是说，如何从已知的状态推导出新的状态，状态转移方程是解决问题的核心，一般想明白状态转移方程问题就解决了。
# 确定初始状态和边界条件：有了状态转移方程后，我们需要确定问题的初始状态。同时，我们还需要考虑一些特殊情况，比如输入为0或负数时应该如何处理。
# 按照状态转移方程求解：最后一步是实际求解过程。我们通常会按照一定的顺序（比如从小到大）来计算每个状态的值。在这个过程中，我们使用已经计算出的状态值，通过状态转移方程来得到新的状态值。这个过程需要特别注意计算的顺序，确保在计算某个状态时，它依赖的所有状态都已经计算出来了。
