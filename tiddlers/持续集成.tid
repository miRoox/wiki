aliases: CI CDI
created: 20230320145155205
creator: miRoox
modified: 20240930060849450
modifier: miRoox
tags: 软件工程 TODO 软件测试
title: 持续集成
tmap.id: 0d6d1737-cd68-4416-afa5-e65fdbd34196
type: text/vnd.tiddlywiki

''持续集成''（Continuous Integration, CI）是一种[[软件工程]]流程，是将所有软件工程师对于软件的工作副本持续集成到共享[[主线|版本控制：主干]]的一种举措。在[[测试驱动开发]]的作法中，通常还会搭配自动测试。持续集成的提出主要是为解决软件进行系统集成时面临的各项问题。

!! 实践

* 维护[[一个代码库|版本控制：单一仓库]]：项目源代码应当使用统一的[[版本控制系统]]。所有项目相关的代码都需要存储在该[[代码库|版本控制：仓库]]中。这种方法也推荐最小化[[分支|版本控制：分支]]的使用，而建议将所有所有改动集成在一起而不是同时维护多个分支。
* 自动化（一键式）构建：通过一条指令来完成整个系统的构建。例如，[[CMake]]等构建工具。
* 让构建时会自我测试：一旦代码构建好，就应运行所有的测试以保证程序行为符合预期。
* 每人每天都应至少提交一次：通过定期提交代码来减少冲突的数量。早期的小冲突更容易沟通解决。
* 每份（到[[主线|版本控制：主干]]的）提交都应进行构建：保证历史代码质量。
* 每个[[bug|程序错误]]修复的提交都应伴随着对应的测试用例：修复时提交能够复现这一bug的测试用例，以避免问题[[回归|回归测试]]。
* 保持快速构建：集成时一旦遇到问题，可以快速找出问题所在。
* 在生产环境的副本中测试：因为问题也可能发生的[[部署|软件部署]]上线时。可以使用[[虚拟化]]的生产环境，或者[[渐进式更新]]来达成。
* 让获取最新发布版本更容易
* 任何人都可以查看最后构建的结果
* 自动部署

!! 优缺点

优点：

* 及早发现集成bug，且由于修订的内容较小所以易于追踪，这可以节省项目的时间与成本。
* 避免发布日期前发生混乱，那时每个人都会尝试为他们所造成的一点点不兼容的版本做检查。
* 当[[单元测试]]失败或出现bug，若开发人员需要在不调试的情况下还原代码库到一个没有问题的状态，只需要放弃一小部分的更改 (因为集成的次数频繁)。
* 让“最新”的程序可保持可用的状态供测试、演示或发布用。
* 频繁的提交代码会促使开发人员创建模块化，低复杂性的代码。

缺点：

* 构建一个自动化测试包需要大量的工作，包括不断努力以覆盖新功能，并依照特定情境进行代码修改。
** 持续性集成可以在不需要测试集的情况下执行，但是如果必须手动且经常地完成，生产产品的质量保证成本将会大幅提高。
* 构建系统需要一些工作，而且可能变得复杂，难以灵活修改。
* 如果范围很小或包含无法测试的旧版代码，持续性集成不一定有价值。
** 增加的价值取决于测试的质量以及代码的真实可测性。
* 较大的团队意味着不断将代码添加到集成队列中，因此追踪交付（同时保持质量）很困难，而排队可能会减慢所有人的进度。
